<!doctype html>
<html>
  <head>
    <meta name="viewport" content="width=device-width, initial-scale=1">
    <style>
      * {
        padding: 0;
        margin: 0;
        font-family: Lucida Sans Typewriter,Lucida Console,monaco,Bitstream Vera Sans Mono,monospace;
      }

      html {
        box-sizing: border-box;
      }
      *, *:before, *:after {
        box-sizing: inherit;
      }

      .form {
        margin-top: 50px;
        margin-right: auto;
        margin-left: auto;
        border: 1px solid #666;
        width: 90vw;
        padding: 10px;
        font-size: 12px;
      }

      .row {
        margin-bottom: 5px;
        display: flex;
        align-items: center;
      }

      input[type="text"] {
        width: 100%;
        -webkit-appearance: none;
      }

      input, button {
        height: 30px;
        padding: 5px;
        border: 1px solid #999;
        background: white;
        border-radius: 0;
      }

      .checkbox {
        display: flex;
        align-items: center;
      }

      .checkbox span {
        margin-left: 10px;
      }

      .inline {
        display: flex;
        align-items: center;
      }

      .inline > div {
        flex-basis: 100%;
      }

      .inline > span.time {
        margin-left: 10px;
        margin-right: 10px;
        flex-basis: 0;
      }

      .log {
        border: 1px solid #black;
        background: black;
        color: white;
        padding: 10px;
        margin-top: 10px;
        height: 300px;
        overflow-x: hidden;
        overflow-y: scroll;
      }

      .wait {
        background-image: url(/img/load.gif);
        background-position: center center;
        background-size: cover;
        background-repeat: no-repeat;
        height: 30px;
        width: 45px;
        display: inline-block;
        margin-left: 10px;
        opacity: 0;
        transition: opacity 1s;
      }
      .wait.shown {
        opacity: 1;
      }
    </style>
    <script src="/libs/socket.io-client/dist/socket.io.js"></script>
  </head>
  <body>
    <form id="form" method="get" action="/analyze" class="form">
      <div class="row">
        <input type="text" name="url" placeholder="URL">
      </div>
      <div class="row">
        <div class="inline">
          <div>
            <input type="text" name="w" placeholder="1280">
          </div>
          <span class="time">x</span>
          <div>
            <input type="text" name="h" placeholder="900">
          </div>
        </div>
      </div>
      <div class="row">
        <label class="checkbox">
          <input type="checkbox" name="q">
          <span>Quick Analyze</span>
        </label>
      </div>
      <div class="row">
        <label class="checkbox">
          <input type="checkbox" name="m">
          <span>UserAgent for Mobile Device</span>
        </label>
      </div>
      <div class="row">
        <button type="submit" name="submit">Analyze</button>
        <div id="wait" class="wait">
        </div>
      </div>
      <div id="log" class="log">
      </div>
    </form>
    <script>
      var form = document.getElementById('form')
      var log = document.getElementById('log')
      var wait = document.getElementById('wait')
      var socket = io()
      var formData = {}

      var appendLog = function(msg) {
        var div = document.createElement('div')
        div.innerHTML = msg.info + (msg.time ? (' [' + msg.time + 'ms]') : '')

        log.appendChild(div)
      }

      socket.on('accept_analyze_request', function(msg) {
        formData.url = msg.url
        formData.tag = msg.tag

        socket.emit('subscribe_analyze', formData)
      })

      socket.on('analyze_progress', function(msg) {
        if (msg.tag !== formData.tag) {
          return
        }

        console.log(msg)
        appendLog(msg)
      })

      socket.on('analyze_complete', function(msg) {
        if (msg.tag !== formData.tag) {
          return
        }

        wait.classList.remove('shown')

        setTimeout(function() {
          window.location.href = msg.reportLink
        }, 2e3)
      })

      socket.on('analyze_error', function(msg) {
        if (msg.tag !== formData.tag) {
          return
        }

        wait.classList.remove('shown')

        appendLog({
          info: 'An error occurs when analyze the given URL, please try again with [Quick Analyze] mode'
        })

        form.elements.url.disabled = false
        form.elements.w.disabled = false
        form.elements.h.disabled = false
        form.elements.m.disabled = false
        form.elements.q.disabled = false
        form.elements.submit.disabled = false
      })

      form.addEventListener('submit', function(event) {
        event.preventDefault()

        formData = {
          url: form.elements.url.value,
          w: form.elements.w.value,
          h: form.elements.h.value,
          q: form.elements.q.checked,
          m: form.elements.m.checked
        }

        if (!formData.url) {
          appendLog({
            info: 'Invalid parameters: URL should not be empty!'
          })

          return
        }

        socket.emit('request_analyze', formData)

        form.elements.url.disabled = true
        form.elements.w.disabled = true
        form.elements.h.disabled = true
        form.elements.q.disabled = true
        form.elements.m.disabled = true
        form.elements.submit.disabled = true

        wait.classList.add('shown')
      })
    </script>
  </body>
</html>
